package iapp.util;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

/**
* @author vpronkin
* @company UnitedThinkers
* @since 2014/12/17
*/

public class DateHelper {

	public static TimeZone SERVER_TIME_ZONE = TimeZone.getDefault();
	public static Locale SERVER_LOCALE = Locale.getDefault();
	public static final String DateFormat = "yyyyMMdd";
		
	
	public static enum TIME_UNIT {
		MILLISECONDS,
		SECONDS,
		MINUTES,
		HOURS,
	    DAYS
	   
		
	}
	
	public static Calendar getCalendar(){
		return Calendar.getInstance(SERVER_TIME_ZONE, SERVER_LOCALE);
	}
		
	public static Date getLastDateOfMonth(Date date){
		Calendar calendar = getCalendar();
		 calendar.setTime(date);
		 calendar.set(Calendar.DATE, calendar.getActualMaximum(Calendar.DATE));
		 return calendar.getTime();
		 
	}
	
	public static Date getCurrentDate(){
		return clearTime(new Date());
	}

	public static int getCurrentHourOfDay() {
		return getCalendar().get(Calendar.HOUR_OF_DAY);
	}
	
	public static int getCurrentHourOfDay(TimeZone timeZone) {
		return Calendar.getInstance(timeZone).get(Calendar.HOUR_OF_DAY);
	}
	
	public static Date clearTime(Date date){
		Calendar c = getCalendar();
		c.setTime(date);
		clearTime(c);
		return c.getTime();
	}

	public static void clearTime(Calendar c){
		c.set(Calendar.HOUR_OF_DAY, 0);
		c.set(Calendar.MINUTE, 0);
		c.set(Calendar.SECOND, 0);
		c.set(Calendar.MILLISECOND, 0);
	}
	
	public static DateFormat getDateFormat(){
		return new SimpleDateFormat(DateFormat);
	}
	
	public static String formatDate(Date date) {
		
		if (date == null)
			return null;
		
		return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date);
	}
	
	public static String formatTime(Date date) {
		
		if (date == null)
			return null;
		
		return new SimpleDateFormat("HH:mm:ss,SSS").format(date);
	}
	
	public static String formatDate2jsonLog(Date date) {
		return formatDate("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", date);
	}
	
	public static String formatDate(String pattern, Date date) {
		return formatDate(pattern, null, date);
	}
	
	public static String formatDate(String pattern, String timeZone, Date date) {
		
		SimpleDateFormat dateFormat = new SimpleDateFormat(pattern);
		
		if (timeZone != null)
			dateFormat.setTimeZone(TimeZone.getTimeZone(timeZone));
		
		return dateFormat.format(date);
	}
	
	/**
	 * @param String date  - yyyy-MM-dd HH:mm:ss
	 * @return
	 * @throws ParseException
	 */
	public static Date parseDate(String date) throws ParseException {
		
		if (date == null || "".equals(date))
			return null;
		
		return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(date);
	}
	
	public static Integer getAge(Date dueDate){
		
		if (dueDate == null){
			return null;
		}
		Calendar cToday = DateHelper.getCalendar();
		cToday.setTimeZone(TimeZone.getTimeZone("GMT"));
		
		Calendar cDueDate = DateHelper.getCalendar();
		cDueDate.setTime(dueDate);
		cDueDate.setTimeZone(TimeZone.getTimeZone("GMT"));
	
		DateHelper.clearTime(cToday);
		DateHelper.clearTime(cDueDate);
		
		long today = cToday.getTimeInMillis();
		long date = cDueDate.getTimeInMillis();
		
		 /* 86400000=1000*60*60*24 millisecond/second/minutes/hours/days */
		return new Long((today - date)/86400000l).intValue();
	}
	
	/*
	 * 
	 * Ð’Ð¾Ð·Ð²Ñ€Ð°Ñ‰Ð°ÐµÑ‚ ÐºÐ¾Ð»-Ð²Ð¾ Ð¿Ñ€Ð¾ÑˆÐµÐ´ÑˆÐµÐ³Ð¾ Ð²Ñ€ÐµÐ¼ÐµÐ½Ð¸ Ð¾Ñ‚ Ñ‚ÐµÐºÑƒÑ‰ÐµÐ¹ Ð´Ð°Ñ‚Ñ‹,  Ñ‚Ð¸Ð¿ Ð²Ð¾Ð·Ð²Ñ€Ð°Ñ‰Ð°ÐµÐ¼Ð¾Ð³Ð¾ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ñ� Ð¾Ð¿Ñ€ÐµÐ´ÐµÐ»Ñ�ÐµÑ‚Ñ�Ñ� timeUnit
	 * */
	public static Integer getAge(Date dueDate, TIME_UNIT timeUnit){
		
		if (dueDate == null){
			return Integer.MAX_VALUE;
		}
		
		Calendar todayCalendar = DateHelper.getCalendar();
		todayCalendar.setTimeZone(TimeZone.getTimeZone("GMT"));
		
		Calendar dueDateCalendar = DateHelper.getCalendar();
		dueDateCalendar.setTime(dueDate);
		dueDateCalendar.setTimeZone(TimeZone.getTimeZone("GMT"));
	
		long todayMillis = todayCalendar.getTimeInMillis();
		long dueDateMillis = dueDateCalendar.getTimeInMillis();
		
		switch (timeUnit){
		
		/*Ð²Ð¾Ð·Ð²Ñ€Ð°Ð·Ñ‰Ð°ÐµÐ¼ Ð¼Ñ�*/
		case MILLISECONDS :
			return new Long((todayMillis - dueDateMillis)).intValue();

		case SECONDS :
			return new Long((todayMillis - dueDateMillis)/1000).intValue();

		case MINUTES :
			return new Long((todayMillis - dueDateMillis)/(1000*60)).intValue();

		case HOURS :
			return new Long((todayMillis - dueDateMillis)/(1000*60*60)).intValue();
			
		case DAYS :
			return new Long((todayMillis - dueDateMillis)/(1000*60*60*24)).intValue();
			
		default	:
			return new Long((todayMillis - dueDateMillis)/86400000l).intValue();
		} 
		
		
		 /* 86400000=1000*60*60*24 millisecond/second/minutes/hours/days */
	//	return new Long((today - date)/86400000l).intValue();
		
		
	}
	
 
	/**
	 * @param fromDate
	 * @param toDate
	 * @return - age between two dates
	 */
	public static Integer getAge(Date fromDate, Date toDate){
		
		if (toDate == null ){
			return null;
		}
		
		Calendar fDate = DateHelper.getCalendar();
		fDate.setTime(fromDate);
		fDate.setTimeZone(TimeZone.getTimeZone("GMT"));
		
		Calendar tDate = DateHelper.getCalendar();
		tDate.setTime(toDate);
		tDate.setTimeZone(TimeZone.getTimeZone("GMT"));
	
		DateHelper.clearTime(fDate);
		DateHelper.clearTime(tDate);
		
		long today = fDate.getTimeInMillis();
		long date = tDate.getTimeInMillis();
		
		 /* 86400000=1000*60*60*24 millisecond/second/minutes/hours/days */
		return new Long((today - date)/86400000l).intValue();
	}
	
	public static Integer getHoursAge(Date dueDate){
		
		if (dueDate == null)
			return null;
				
		long today = new Date().getTime();
		long date = dueDate.getTime();
		
		 /* 3600000=1000*60*60 millisecond/second/minutes/hours */
		return new Long((today - date)/3600000l).intValue();
	}

	public static Date shiftDate(Date date, int period) {
		
		if (period == 0)
			return date;
		
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.DATE, period);
		
		return calendar.getTime();
	}
	
	public static Date shiftMinute(int period) {
		Calendar calendar = Calendar.getInstance();
		calendar.add(Calendar.MINUTE, period);
		
		return calendar.getTime();
	}
	
	
	public static Date shiftSeconds(Date date, int period) {
		
		if (period == 0)
			return date;
		
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.SECOND, period);
		
		return calendar.getTime();
	}
	
	public static Date shiftMinute(Date date, int period) {
		
		if (period == 0)
			return date;
		
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.MINUTE, period);
		
		return calendar.getTime();
	}
	
	public static Date shiftHour(int period) {
		Calendar calendar = Calendar.getInstance();
		calendar.add(Calendar.HOUR, period);
		
		return calendar.getTime();
	}
	
	public static Date shiftHour(Date date, int period) {
		
		if (period == 0)
			return date;
		
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.HOUR, period);
		
		return calendar.getTime();
	}
	
	public static Date shiftDate(int period) {		
		Calendar calendar = Calendar.getInstance();
		calendar.add(Calendar.DATE, period);
		clearTime(calendar);
		
		return calendar.getTime();
	}
	
	public static Date shiftMonth(Date date, int period) {
		
		if (period == 0)
			return date;
		
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.MONTH, period);
		
		return calendar.getTime();
	}
	
	public static Date shiftMonth(int period) {
		
		if (period == 0)
			return DateHelper.getCurrentDate();
		
		Calendar calendar = Calendar.getInstance();
		clearTime(calendar);
		calendar.add(Calendar.MONTH, period);
		
		return calendar.getTime();
	}
	
	public static Date shiftYear(int period) {
		
		if (period == 0)
			return DateHelper.getCurrentDate();
		
		Calendar calendar = Calendar.getInstance();
		clearTime(calendar);
		calendar.add(Calendar.YEAR, period);
		
		return calendar.getTime();
	}
	
	public static int getMonth(Date date) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		
		return calendar.get(Calendar.MONTH);
	}
	
	public static Date getFromDateDefault(){
		return DateHelper.shiftDate(-13);
	}
	
	public static Date getToDateDefault(){
		return DateHelper.shiftDate(1);
	}
	
	public static int getDayOfYear() {
		return Calendar.getInstance().get(Calendar.DAY_OF_YEAR);
	}
	
	public static int getDayOfMonth() {
		return Calendar.getInstance().get(Calendar.DAY_OF_MONTH);
	}
	
	public static int getDayOfMonth(Date date) {
		
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		
		return calendar.get(Calendar.DAY_OF_MONTH);
	}
	
	public static int getYear() {
		return Calendar.getInstance().get(Calendar.YEAR);	
	}
	
	public static Date getDate(int year, int month, int date) {
		
		Calendar calendar = Calendar.getInstance();
		calendar.set(Calendar.DATE, 1);
		calendar.set(Calendar.YEAR, year);
		calendar.set(Calendar.MONTH, month);
		calendar.set(Calendar.DATE, date);
		
		return calendar.getTime();
	}
	
	public static int getDayOfWeek(Date date) {
		
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		
		return calendar.get(Calendar.DAY_OF_WEEK);
	}
	
	public static boolean isWeekend(Date date) {
		int dayOfWeek = getDayOfWeek(date);
		return dayOfWeek  == Calendar.SATURDAY || dayOfWeek == Calendar.SUNDAY;
	}
	
	public static boolean isLastDayOfMonth(Date date) {
		
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		
		return calendar.getActualMaximum(Calendar.DAY_OF_MONTH) == getDayOfMonth(date);
	}
	
	public static boolean isLastDayOfMonth() {	
		return getCalendar().getActualMaximum(Calendar.DAY_OF_MONTH) == getDayOfMonth();
	}
	public static int getDaysBetweenDates(Date beginDate, Date endDate) {	
		if (beginDate == null || endDate == null) return 0;
		
		long beginTime  =  beginDate == null? 0: beginDate.getTime();
		long endTime  =  endDate == null? 0: endDate.getTime();
		long diff = (endTime - beginTime);
		
		long diffDays = diff / (24 * 60 * 60 * 1000);
		return (int)diffDays;
	}
	public static Integer getDay(Date date){
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		return calendar.get(Calendar.DAY_OF_MONTH);
	}
	public static String getDayString(Date date){
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		
		Integer day = calendar.get(Calendar.DAY_OF_MONTH);
		if(day < 10){
			return "0".concat(day.toString());
		}
		return day.toString();
	}
	
	public static Date setTime(Date date, int hour, int minute, int second) {
		 Calendar cal = Calendar.getInstance();
		 cal.setTime(date);
		 cal.set(Calendar.HOUR_OF_DAY, hour);
		 cal.set(Calendar.MINUTE, minute);
		 cal.set(Calendar.SECOND, second);
		 
		 return cal.getTime();
	}
	
	public static Date clearMilliseconds(Date date){
		Calendar c = getCalendar();
		c.setTime(date);
		c.set(Calendar.MILLISECOND, 0);
		return c.getTime();
	}
}
